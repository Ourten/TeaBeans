buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'http://maven.ferenyr.info/artifactory/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.13.0"
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}

apply plugin: 'java'

// IDE
apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
    jcenter()
}

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Maven Artefacts Info
group = "fr.ourten"
archivesBaseName = "teabeans"
version = "${project.teabeans_version}"

dependencies {
    testCompile('org.junit.jupiter:junit-jupiter-api:5.6.2')
    testCompile('org.assertj:assertj-core:3.16.1')

    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.6.2')
}

// Publications

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = 'ourten'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(sourcesJar) {
                classifier = 'sources'
            }
            artifact source: sourcesJar, classifier: 'sources', extension: 'jar'
        }
    }
}

apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.host.url", project.hasProperty('sonarqube_url') ? project.sonarqube_url : System.getenv('SONARQUBE_URL')
        property "sonar.login", project.hasProperty('sonarqube_login') ? project.sonarqube_login : System.getenv('SONARQUBE_LOGIN')
        property "sonar.projectKey", "Teabeans"
        property "sonar.projectName", "Teabeans"
        property "sonar.groovy.binaries", "${project.buildDir.name}${File.separator}classes"
    }
}

test {
    useJUnitPlatform()
}

apply plugin: "jacoco"

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

test.finalizedBy jacocoTestReport
project.tasks["sonarqube"].dependsOn jacocoTestReport

